plugins {
    id 'com.android.application'
    id 'org.sonarqube'
    id "jacoco"
}

android {
    compileSdk 30
    defaultPublishConfig "debug"
    defaultConfig {
        applicationId "com.excellent.myapplication"
        minSdk 21
        targetSdk 26
        versionCode 1
        versionName "1.0"
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }


}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.0'
    // Core library
    testImplementation 'androidx.test:core:1.3.0'
    // AndroidJUnitRunner and JUnit Rules
    testImplementation 'androidx.test:runner:1.3.0'
    testImplementation 'androidx.test:rules:1.3.0'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'androidx.test.ext:truth:1.3.0'
    testImplementation 'androidx.test:monitor:1.4.0'
    testImplementation 'com.google.truth:truth:1.0'
    //junit
    testImplementation 'junit:junit:4.13.2'
    //mockito
    testImplementation "org.mockito:mockito-core:3.3.3"
    //powermock
    testImplementation "org.powermock:powermock-module-junit4:2.0.9"
    testImplementation "org.powermock:powermock-module-junit4-rule:2.0.9"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.9"
    testImplementation "org.powermock:powermock-classloading-xstream:2.0.9"
    //robolectric
    testImplementation "org.robolectric:robolectric:4.6.1"
    //mockwebserver
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.12.0'

    testImplementation 'com.github.andrzejchm.RESTMock:android:0.3.1'
    //AssertJ
    testImplementation 'org.assertj:assertj-core:3.13.2'
}


task jacocoTestReportTest(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    //we use "debug" build type for test coverage (can be other)
    group = "reporting"
    description = "Generate unified Jacoco code coverage report"

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
//        xml.destination = "${buildDir}/reports/jacocoTestReport.xml"
//        html.destination = "${buildDir}/reports/jacoco"
//        csv.destination = "${buildDir}/reports/jacocoTestReport.csv"
    }

    def fileFilter = [
            '**/*Test*.*',
            '**/AutoValue_*.*',
            '**/*JavascriptBridge.class',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*$InjectAdapter.class',
            '**/*$ModuleAdapter.class',
            '**/*$ViewInjector*.class',
            '**/*_MembersInjector.class', //Dagger2 generated code
            '*/*_MembersInjector*.*', //Dagger2 generated code
            '**/*_*Factory*.*', //Dagger2 generated code
            '*/*Component*.*', //Dagger2 generated code
            '**/*Module*.*' //Dagger2 generated code
    ]
    def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    //we use "debug" build type for test coverage (can be other)
//    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
//    classDirectories.from = files([javaDebugTree, kotlinDebugTree])
    classDirectories.from = files([javaDebugTree])
    // we need to target both java and kotlin build folder
    executionData.from = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec", //we use "debug" build type for test coverage (can be other)
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

sonarqube {
    properties {
        //Sonar服务器地址
//        property "sonar.host.url", "http://192.168.8.77:31291/"
//        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "IvBabyAppExample"
        property "sonar.projectName", "IvBabyAppExample"
        //需要扫描的上传检测代码的模块，可以选择也可以配置哪一些需要或者不需要上传的模块(这里指APP模块下面的java包里面的全部)
        property "sonar.coverage.jacoco.xmlReportPaths","build/reports/jacoco/jacocoTestReportTest/jacocoTestReportTest.xml"

    }
}